// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  role        Role 
  name        String?
  phone       String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vehicles        Vehicle[]
  ridesAsCustomer Ride[] @relation("CustomerRides")
  ridesAsDriver   Ride[] @relation("DriverRides")
}

model Vehicle {
  id           Int      @id @default(autoincrement())
  userId       Int
  vehicleNo    String   @unique
  licenseNo    String
  vehicleType  String   
  vehicleModel String?
  idProof      String?
  profilePhoto String?
  isEnabled    Boolean  @default(true) 

  user   User   @relation(fields: [userId], references: [id])
  rides  Ride[]
}

model Ride {
  id             Int       @id @default(autoincrement())
  customerId     Int
  driverId       Int?
  vehicleId      Int?
  pickupLocation String
  dropLocation   String
  pickupTime     DateTime?
  dropoffTime    DateTime?
  status         RideStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  customer   User     @relation("CustomerRides", fields: [customerId], references: [id])
  driver     User?    @relation("DriverRides", fields: [driverId], references: [id])
  vehicle    Vehicle? @relation(fields: [vehicleId], references: [id])
  notifications Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  rideId    Int
  message   String
  sentTo    Int 
  type      String
  createdAt DateTime @default(now())

  ride Ride @relation(fields: [rideId], references: [id])
}

enum Role {
  CUSTOMER
  DRIVER
}

enum RideStatus {
  PENDING
  ACCEPTED
  ONGOING
  COMPLETED
  CANCELLED
}
